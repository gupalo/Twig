Twig для дизайнерів шаблонів
============================

Цей документ описує синтаксис та семантику движка шаблонів і
буде найбільш корисним як довідник для тих, хто створює шаблони для Twig.

Короткий зміст
--------------

Шаблон - це звичайний текстовий файл. Він може генерувати будь-який текстовий формат (HTML,
XML, CSV, LaTeX тощо). Він не має спеціального розширення, ``.html`` або
або ``.xml`` підійдуть.

Шаблон містить **змінні** або **вирази**, які замінюються на
значення, коли шаблон обчислюється, і **теги**, які керують логікою шаблону.

Нижче наведено мінімальний шаблон, який ілюструє деякі основи. Подальші
деталі ми розглянемо пізніше:

.. code-block:: html+twig

    <!DOCTYPE html>
    <html>
        <head>
            <title>My Webpage</title>
        </head>
        <body>
            <ul id="navigation">
            {% for item in navigation %}
                <li><a href="{{ item.href }}">{{ item.caption }}</a></li>
            {% endfor %}
            </ul>

            <h1>My Webpage</h1>
            {{ a_variable }}
        </body>
    </html>

Існує два види роздільників: ``{% ... %}`` і ``{{ ... }}``. Перший
використовується для виконання тверджень, таких як for-цикли, другий - для виведення
результату виразу.

Інтеграція IDE
--------------

Багато IDE підтримують виділення синтаксису та автозаповнення для Twig:

* *Textmate* через `пакет Twig`_
* *Vim* через `плагін vim-twig`_
* *Netbeans* (нативна, починаючи з 7.2)
* *PhpStorm* (нативна, починаючи з 2.1)
* *Eclipse* через `плагін Twig`_
* *Sublime Text* через `пакет Twig`_
* *GtkSourceView* через `визначення мови Twig`_ (використовується gedit та іншими проєктами)
* *Coda* та *SubEthaEdit* через `режим синтаксису Twig`_
* *Coda 2* через `інший режим синтаксису Twig`_
* *Komodo* та *Komodo Edit* через режим перевірки підсвічування/синтаксису
* *Notepad++* через `Notepad++ Twig Highlighter`_
* *Emacs* через `web-mode.el`_
* *Atom* через `PHP-twig для atom`_
* *Visual Studio Code* через `Twig pack`_, `Modern Twig`_ або `Twiggy`_

Вас також можуть зацікавити:

* `TwigFiddle`_: онлайн-сервіс, який дозволяє виконувати шаблони Twig
  з браузера; він підтримує всі версії Twig

* `Сервер мови Twig`_: надає деякі можливості мови, такі як синтаксис
  підсвічування, діагностика, автозаповнення, ...

Змінні
------

Додаток передає змінні шаблонам для маніпуляцій у шаблоні. 
Змінні можуть мати атрибути або елементи, до яких ви також можете отримати доступ.
Візуальне представлення змінної значною мірою залежить від додатку, який її надає.

Використовуйте крапку (``.``) для доступу до атрибутів змінної (методів або властивостей
PHP-об'єкта або елементів PHP-масиву):

.. code-block:: twig

    {{ foo.bar }}

.. note::

    Важливо знати, що фігурні дужки *не* є частиною змінної, 
    а є частиною твердження print. При доступі до змінних всередині тегів
    не використовуйте фігурні дужки.

Якщо змінна або атрибут не існують, поведінка залежить від значення опції
``strict_variables`` (див. :ref:`опції середовища <environment_options_strict_variables>`):

* Якщо ``false``, повертає ``null``;
* Якщо ``true``, викликає виключення.

.. sidebar:: Реалізація

    Для зручності ``foo.bar`` виконує наступні дії на рівні PHP:

    * перевірити, чи є ``foo`` послідовністю або відображенням, а ``bar`` - валідним;
    * якщо ні, і якщо ``foo`` є об'єктом, перевірити, чи є ``bar`` є валідною властивістю;
    * якщо ні, і якщо ``foo`` є об'єктом, перевірити, чи є ``bar`` валідним методом
    (навіть якщо ``bar`` є конструктором - використовуйте ``__construct()`` замість нього);
    * якщо ні, і якщо ``foo`` є об'єктом, перевірити, чи є ``getBar`` валідним методом;
    * якщо ні, і якщо ``foo`` є об'єктом, перевірити, чи є ``isBar`` валідним методом;
    * якщо ні, і якщо ``foo`` є об'єктом, перевірити, чи є ``hasBar`` є валідним  методом;
    * якщо ні, і якщо ``strict_variables`` має значення ``false``, повернути ``null``;
    * якщо ні, то викликати виключення.

    Twig також підтримує особливий синтаксис для доступу до елементів PHP-масивів,
    ``foo['bar']``:

    * перевірити, чи є ``foo`` послідовністю або відображенням, а ``bar`` - валідним елементом;
    * якщо ні, і якщо ``strict_variables`` має значення ``false``, повернути ``null``;
    * якщо ні, то викликати виключення.

.. note::

    Якщо ви хочете отримати доступ до динамічного атрибуту змінної, використовуйте функцію
    :doc:`attribute<functions/attribute>` замість цього.

    Функція ``attribute`` також корисна, коли атрибут містить
    спеціальні символи (наприклад, ``-``, які інтерпретуються як оператор мінус):

    .. code-block:: twig

        {# еквівалентно непрацюючому foo.data-foo #}
        {{ attribute(foo, 'data-foo') }}

Глобальні змінні
~~~~~~~~~~~~~~~~

Наступні змінні завжди доступні у шаблонахs:

* ``_self``: посилається на поточне імʼя шаблону;
* ``_context``: посилається на поточний контекст;
* ``_charset``: посилається на поточний набір символів.

Встановлення змінних
~~~~~~~~~~~~~~~~~~~~

Ви можете присвоювати значення змінним всередині блоків коду. Для присвоєння використовується тег
:doc:`set<tags/set>`:

.. code-block:: twig

    {% set foo = 'foo' %}
    {% set foo = [1, 2] %}
    {% set foo = {'foo': 'bar'} %}

Фільтри
-------

Змінні можна змінювати за допомогою **фільтрів**. Фільтри відокремлюються від змінної
символом труби (``|``). Кілька фільтрів можна з'єднати у ланцюжок. Виведення
одного фільтра застосовується до наступного.

У наступному прикладі вилучаються всі HTML-теги з ``name`` і випадків заголовків:

.. code-block:: twig

    {{ name|striptags|title }}

Фільтри, які приймають аргументи, мають круглі дужки навколо аргументів. У цьому прикладі
елементи списку з'єднуються комами:

.. code-block:: twig

    {{ list|join(', ') }}

Щоб застосувати фільтр до фрагмента коду, обгорніть його тегом
:doc:`apply<tags/apply>`:

.. code-block:: twig

    {% apply upper %}
        This text becomes uppercase
    {% endapply %}

Перейдіть на сторінку :doc:`filters<filters/index>`, щоб дізнатися більше про вбудовані
фільтри.

Функції
-------

Для створення змісту можна викликати функції. Функції викликаються за їхнім ім'ям, 
яке супроводжується круглими дужками (``()``) і може мати аргументи.

Наприклад, функція ``range`` повертає список, що містить арифметичну прогресію цілих чисел:

.. code-block:: twig

    {% for i in range(0, 3) %}
        {{ i }},
    {% endfor %}

Перейдіть на сторінку :doc:`функції<functions/index>`, щоб дізнатися більше про
вбудовані функції.

.. _named-arguments-uk:

Іменовані аргументи
-------------------

Іменовані аргументи підтримуються у функціях, фільтрах та тестах.

.. versionadded:: 3.12

    Twig підтримує як ``=``, так і ``:`` в якості роздільників між іменами аргументів та
    значеннями, але підтримка ``:`` була представлена в Twig 3.12.

.. code-block:: twig

    {% for i in range(low: 1, high: 10, step: 2) %}
        {{ i }},
    {% endfor %}

Використання іменованих аргументів робить ваші шаблони більш зрозумілими щодо 
значень, які ви передаєте як аргументи:

.. code-block:: twig

    {{ data|convert_encoding('UTF-8', 'iso-2022-jp') }}

    {# versus #}

    {{ data|convert_encoding(from: 'iso-2022-jp', to: 'UTF-8') }}

Іменовані аргументи також дозволяють вам пропустити деякі аргументи, для яких ви не хочете 
змінювати значення за замовчуванням:

.. code-block:: twig

    {# перший аргумент - це формат дати, який за замовчуванням має значення глобального формату даних, якщо передано null #}
    {{ "now"|date(null, "Europe/Paris") }}

    {# або пропустити значення формату, використавши іменований аргумент для часового поясу #}
    {{ "now"|date(timezone: "Europe/Paris") }}

Ви також можете використовувати як позиційні, так і іменовані аргументи в одному виклику. У цьому випадку
позиційні аргументи завжди мають бути перед іменованими:

.. code-block:: twig

    {{ "now"|date('d/m/Y H:i', timezone: "Europe/Paris") }}

.. tip::

    Кожна сторінка документації функції, фільтра і тесту має розділ, де перелічено назви
    всіх підтримуваних аргументів.

Структура управління
--------------------

Структура управління - це все те, що контролює хід виконання програми - умовні оператори (тобто ``if``/``elseif``/``else``), цикли ``for``, а також а також такі речі, як блоки. Структури
управління з'являються всередині блоків ``{% ... %}``.

Наприклад, щоб відобразити список користувачів, що міститься у змінній з назвою
``users``, використовуйте тег :doc:`for<tags/for>`:

.. code-block:: html+twig

    <h1>Members</h1>
    <ul>
        {% for user in users %}
            <li>{{ user.username|e }}</li>
        {% endfor %}
    </ul>

Тег :doc:`if<tags/if>` може бути використаний для тестування виразу:

.. code-block:: html+twig

    {% if users|length > 0 %}
        <ul>
            {% for user in users %}
                <li>{{ user.username|e }}</li>
            {% endfor %}
        </ul>
    {% endif %}

Перейдіть на сторінку :doc:`теги<tags/index>`, щоб дізнатися більше про вбудовані теги.

Коментарі
---------

Щоб прокоментувати частину рядка у шаблоні, використовуйте синтаксис коментарів ``{# ...
#}``. Це корисно для налагодження або для додавання інформації для інших дизайнерів шаблону
або для вас самих:

.. code-block:: twig

    {# примітка: відключений шаблон, оскільки ми більше не використовуємо це
        {% for user in users %}
            ...
        {% endfor %}
    #}

Додавання інших шаблонів
------------------------

Функція :doc:`include<functions/include>` корисна для додавання шаблону
і повернення відображеного змісту цього шаблону у поточний шаблон:

.. code-block:: twig

    {{ include('sidebar.html') }}

За замовчуванням, додані шаблони мають доступ до того ж контексту, що і шаблон
який їх включає. Це означає, що будь-яка змінна, визначена у головному шаблоні,
буде доступна і у доданому шаблоні:

.. code-block:: twig

    {% for box in boxes %}
        {{ include('render_box.html') }}
    {% endfor %}

Доданий шаблон ``render_box.html`` має доступ до змінної ``box``.

Ім'я шаблону залежить від завантажувача шаблонів. Наприклад, шаблон
``\Twig\Loader\FilesystemLoader`` дозволяє отримати доступ до інших шаблонів,
вказавши ім'я файлу. Ви можете отримати доступ до шаблонів у підкаталогах за допомогою слешу:

.. code-block:: twig

    {{ include('sections/articles/sidebar.html') }}

Ця поведінка залежить від додатку, який вбудовує Twig.

Успадкування шаблону
--------------------

Найпотужніша частина Twig - це успадкування шаблонів. Спадкування шаблонів
дозволяє вам створити базовий "скелет" шаблону, який містить всі загальні
елементи вашого сайту і визначає **блоки**, які дочірні шаблони можуть
перевизначати.

Простіше зрозуміти концепцію, почавши з прикладу.

Давайте визначимо базовий шаблон ``base.html``, який визначає скелет HTML-документа,
який може бути використаний для сторінки з двома колонками:

.. code-block:: html+twig

    <!DOCTYPE html>
    <html>
        <head>
            {% block head %}
                <link rel="stylesheet" href="style.css"/>
                <title>{% block title %}{% endblock %} - My Webpage</title>
            {% endblock %}
        </head>
        <body>
            <div id="content">{% block content %}{% endblock %}</div>
            <div id="footer">
                {% block footer %}
                    &copy; Copyright 2011 by <a href="https://example.com/">you</a>.
                {% endblock %}
            </div>
        </body>
    </html>

У цьому прикладі теги :doc:`block<tags/block>` визначають чотири блоки, які
дочірні шаблони можуть заповнювати. Все, що робить тег ``block`` - повідомляє
движку шаблонів, що дочірній шаблон може перевизначити ці частини шаблону.

Дочірній шаблон може мати такий вигляд:

.. code-block:: html+twig

    {% extends "base.html" %}

    {% block title %}Index{% endblock %}
    {% block head %}
        {{ parent() }}
        <style type="text/css">
            .important { color: #336699; }
        </style>
    {% endblock %}
    {% block content %}
        <h1>Index</h1>
        <p class="important">
            Welcome to my awesome homepage.
        </p>
    {% endblock %}

Ключовим тут є тег :doc:`extends<tags/extends>`. Він повідомляє движку шаблонів,
що цей шаблон «розширює» інший шаблон. Коли система шаблонів оцінює цей шаблон,
спочатку вона знаходить батьківський шаблон. Тег extends повинен бути першим тегом у шаблоні.

Зауважте, що оскільки дочірній шаблон не визначає блок ``footer``, 
замість нього використовується значення з батьківського шаблону.

Ви можете відобразити зміст батьківського блоку за допомогою функції
:doc:`parent<functions/parent>`. Вона повертає результати батьківського блоку:

.. code-block:: html+twig

    {% block sidebar %}
        <h3>Table Of Contents</h3>
        ...
        {{ parent() }}
    {% endblock %}

.. tip::

    Сторінка документації для тегу :doc:`extends<tags/extends>` описує
    більш розширені можливості, такі як вкладення блоків, область видимості,
    динамічне успадкування та умовне успадкування.

.. note::

    Twig також підтримує множинне успадкування через «горизонтальне повторне
    використання» за допомогою тегу :doc:`use<tags/use>`.

Екранування HTML
----------------

При генеруванні HTML на основі шаблонів завжди існує ризик того, що змінна
міститиме символи, які вплинуть на результуючий HTML. Існує два підходи: вручну
екранувати кожну змінну або автоматично екранувати все за замовчуванням.

Twig підтримує обидва підходи, автоматичне екранування увімкнено за замовчуванням.

Стратегію автоматичного екранування можна налаштувати за допомогою опції 
:ref:`autoescape<environment_options>` і за замовчуванням вона дорівнює ``html``.

Робота з екрануванням вручну
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Якщо увімкнено ручне екранування, ви несете відповідальність за екранування змінних,
якщо це необхідно. Що екранувати? Будь-яку змінну, отриману з ненадійного джерела.

Екранування працює за допомогою :doc:`escape<фільтри/екранування>` або фільтра ``e``:

.. code-block:: twig

    {{ user.username|e }}

За замовчуванням фільтр ``escape`` використовує стратегію ``html``, але залежно від
контексту екранування, ви можете явно використовувати іншу стратегію:

.. code-block:: twig

    {{ user.username|e('js') }}
    {{ user.username|e('css') }}
    {{ user.username|e('url') }}
    {{ user.username|e('html_attr') }}

Робота з автоматичним екрануванням
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Незалежно від того, увімкнено автоматичне екранування чи ні, ви можете позначити
чи треба екранувати розділ шаблону, чи ні, за допомогою тегу :doc:`autoescape<tags/autoescape>`:

.. code-block:: twig

    {% autoescape %}
        В цьому блоці все буде автоматично екрановано (використовуючи стратегію HTML)
    {% endautoescape %}

За замовчуванням для автоматичного екранування використовується стратегія екранування
``html``. Якщо ви виводите змінні в інших контекстах, вам слід явно екранувати їх за допомогою
відповідної стратегії екранування:

.. code-block:: twig

    {% autoescape 'js' %}
        В цьому блоці все буде автоматично екрановано (використовуючи стратегію JS)
    {% endautoescape %}

Екранування
-----------

Іноді бажано або навіть необхідно, щоб Twig ігнорував частини, які інакше оброблялися
б як змінні або блоки. Наприклад, якщо використовується синтаксис за замовчуванням, і 
ви хочете використати ``{{`` як сирий рядок у шаблоні, а не створювати змінну, вам 
доведеться вдатися до хитрощів.

Найпростіший спосіб - вивести роздільник змінної (``{{``) за допомогою змінної виразу:

.. code-block:: twig

    {{ '{{' }}

Для великих розділів має сенс позначити блок :doc:`verbatim<tags/verbatim>`.

Макрос
------

Макроси можна порівняти з функціями у звичайних мовах програмування. Вони є
корисними для повторного використання фрагментів HTML, щоб не повторюватися. Вони 
описані в документації тегу :doc:`macro<tags/macro>`.

.. _twig-expressions-uk:

Вирази
------

Twig дозволяє вирази всюди.

Літерали
~~~~~~~~

Найпростішою формою виразів є літерали. Літерали - це представлення
таких типів PHP, як рядки, числа та масиви. Існують наступні літерали:

  * ``«Hello World»``: Все, що знаходиться між двома подвійними або одинарними лапками, є
  рядком. Вони корисні, коли вам потрібен рядок у шаблоні (наприклад, як аргументи викликів
  функцій, фільтрів або просто для розширення або додавання шаблону).

  Зауважте, що певні символи вимагають екранування:
   * ``\f``: Подача форми
   * ``\n``: Новий рядок
   * ``\r``: Повернення каретки
   * ``\t``: Горизонтальна вкладка
   * ``\v``: Вертикальна вкладка
   * ``\x``: Шістнадцяткова послідовність екранування
   * ``\0`` до ``\377``: Вісімкові екрановані послідовності, що представляють символи
   * ``\``: Зворотний слеш
  
  При використанні рядків в одинарних лапках, символ одинарних лапок (``'``) слід екранувати зворотним слешем (``\'``).
  При використанні рядків у подвійних лапках символ подвійних лапок (``"``) слід екранувати зворотним слешем (``\"``).

  Наприклад, рядок в одинарних лапках може містити роздільник, якщо перед ним стоїть
  зворотний слеш (``\``) - як у рядку ``'It\'s good'``. Якщо рядок містить символ
  зворотного слешу (наприклад, ``'c:\Program Files'``), екрануйте його, шляхом подвоєння
  (наприклад, ``'c:\\Program Files'``).

  * ``42`` / ``42.23``: Цілі числа та числа з плаваючою комою створюються шляхом
  запису числа. Якщо присутня крапка, то число є числом з плаваючою комою,
  інакше - цілим числом.

  * ``["foo", "bar"]``: Послідовності визначаються послідовністю виразів,
  розділених комою (``,``) і обгорнутих у квадратні дужки (``[]``).

  * ``{"foo": "bar"}``: Відображення визначаються списком ключів та значень,
  розділених комою (``,``) і обгорнутих у фігурні дужки (``{}``):

  .. code-block:: twig

    {# ключі як рядки #}
    {'foo': 'foo', 'bar': 'bar'}

    {# ключі як імена (еквівалентно попередньому відображенню) #}
    {foo: 'foo', bar: 'bar'}

    {# ключі як цілі числа #}
    {2: 'foo', 4: 'bar'}

    {# ключ можна опустити, якщо він такий самий як імʼя змінної #}
    {foo}
    {# еквівалентно наступному #}
    {'foo': foo}

    {# ключі як вирази (вираз має бути обгорнутий в круглі дужки) #}
    {% set foo = 'foo' %}
    {(foo): 'foo', (1 + 1): 'bar', (foo ~ 'b'): 'baz'}

* ``true`` / ``false``: ``true`` представляє правильне значення, ``false`` представляє
  хибне значення.

* ``null``: ``null`` не представляє конкретного значення. Це значення, що повертається, якщо
  змінна не існує. ``none`` є псевдонімом ``null``.

Послідовності та відображення можуть бути вкладені:

.. code-block:: twig

    {% set foo = [1, {"foo": "bar"}] %}

.. tip::

    Використання рядків у подвійних або одинарних лапках не впливає на продуктивність,
    але :ref:`інтерполяція рядків <templates-string-interpolation>` підтримується лише
    у рядках у подвійних лапках.

.. _templates-string-interpolation-uk:

Інтерполяція рядків
~~~~~~~~~~~~~~~~~~~

Інтерполяція рядка (``#{expression}``) дозволяє виводити будь-який валідний вираз
всередині *рядка у подвійних лапках*. Результат обчислення цього виразу
вставляється у рядок:

.. code-block:: twig

    {{ "foo #{bar} baz" }}
    {{ "foo #{1 + 2} baz" }}

.. tip::

    Інтерполяцію рядків можна ігнорувати, екрануючи їх зворотним слешем
    (``\``):

    .. code-block:: twig

        {# виводить foo #{1 + 2} baz #}
        {{ "foo \#{1 + 2} baz" }}

Математика
~~~~~~~~~~

Twig дозволяє вам виконувати математичні дії у шаблонах; підтримуються наступні оператори:

* ``+``: Додає два числа разом (операнди перетворюються на числа). ``{{
  1 + 1 }}`` буде ``2``.

* ``-``: Віднімає друге число від першого. ``{{ 3 - 2 }}`` буде
  ``1``.

* ``/``: Ділить два числа. Значення, що повертається, буде числом з плаваючою комою. 
  ``{{ 1 / 2 }}`` буде ``{{ 0.5 }}``.

* ``%``: Обчислює остачу від цілочисельного ділення. ``{{ 11 % 7 }}`` буде
  ``4``.

* ``//``: Ділить два числа і повертає результат у вигляді цілого числа з плаваючою комою. ``{{ 20
  // 7 }}`` буде ``2``, ``{{ -20 // 7 }}`` буде ``-3`` (це лише синтаксичний цукор
  для фільтра :doc:`round<filters/round>`).

* ``*``: Множить лівий операнд на правий. ``{{ 2 * 2 }}`` 
  поверне ``4``.

* ``**``: Підносить лівий операнд до ступеня правого операнда. ``{{ 2 ** 3 }}`` поверне ``8``.

.. _template_logic-uk:

Логіка
~~~~~~

Ви можете об'єднати декілька виразів за допомогою наступних операторів:

* ``and``: Повертає true, якщо лівий і правий операнди є істинними.

* ``or``: Повертає true, якщо лівий або правий операнд є істинними.

* ``not``: Заперечує оператор.

* ``(expr)``: Групує вираз.

.. note::

    Twig також підтримує побітові оператори (``b-and``, ``b-xor``, та ``b-or``).

.. note::

    Оператори чутливі до регістру.

Порівняння
~~~~~~~~~~

У будь-якому виразі підтримуються наступні оператори порівняння: ``==``,
``!=``, ``<``, ``>``, ``>=`` і ``<=``.

Перевірити, чи рядок ``starts with`` або ``ends with`` з іншим рядком:

.. code-block:: twig

    {% if 'Fabien' starts with 'F' %}
    {% endif %}

    {% if 'Fabien' ends with 'n' %}
    {% endif %}

Перевірити, чи містить рядок інший рядок, можна за допомогою оператора охоплення (див.
наступний розділ).

.. note::

    Для складних порівнянь рядків оператор ``matches`` дозволяє використовувати
    ``регулярні вирази`_:

    .. code-block:: twig

        {% if phone matches '/^[\\d\\.]+$/' %}
        {% endif %}

Перевірити, що послідовність або відображення ``has every`` або ``has some`` зі своїх елементів і 
повернути ``true``, використовуючи функцію стрілки. Функція стрілки отримує
значення послідовності або відображення:

.. code-block:: twig

    {% set sizes = [34, 36, 38, 40, 42] %}

    {% set hasOnlyOver38 = sizes has every v => v > 38 %}
    {# hasOnlyOver38 is false #}

    {% set hasOver38 = sizes has some v => v > 38 %}
    {# hasOver38 is true #}

Оператор охоплення
~~~~~~~~~~~~~~~~~~

Оператор ``in`` виконує перевірку на охоплення. Він повертає значення ``true``, якщо лівий
операнд міститься в правому:

.. code-block:: twig

    {# returns true #}

    {{ 1 in [1, 2, 3] }}

    {{ 'cd' in 'abcde' }}

.. tip::

    Ви можете використовувати цей фільтр для виконання тесту на охоплення для рядків,
    послідовностей, відображень або об'єктів, що реалізують інтерфейс ``Traversable``.

Щоб виконати негативний тест, використовуйте оператор ``not in``:

.. code-block:: twig

    {% if 1 not in [1, 2, 3] %}

    {# еквівалентно #}
    {% if not (1 in [1, 2, 3]) %}

Оператор тестування
~~~~~~~~~~~~~~~~~~~

Оператор ``is`` виконує тести. Тести можна використовувати для перевірки змінної на відповідність
загальному виразу. Правий операнд є ім'ям тесту:

.. code-block:: twig

    {# з'ясувати, чи є змінна непарною #}

    {{ name is odd }}

Тести можуть також приймати аргументи:

.. code-block:: twig

    {% if post.status is constant('Post::PUBLISHED') %}

Тести можна заперечувати за допомогою оператора ``is not``:

.. code-block:: twig

    {% if post.status is not constant('Post::PUBLISHED') %}

    {# еквівалентно #}
    {% if not (post.status is constant('Post::PUBLISHED')) %}

Перейдіть на сторінку :doc:`тести<tests/index>`, щоб дізнатися більше про вбудовані
тести.

Інші оператори
~~~~~~~~~~~~~~

Наступні оператори не підпадають під жодну з інших категорій:

* ``|``: Застосовує фільтр.

* ``..``: Створює послідовність на основі операнда до і після оператора
  (це синтаксичний цукор для фукнції :doc:`range<functions/range>`):

  .. code-block:: twig

      {% for i in 1..5 %}{{ i }}{% endfor %}

      {# еквівалентно #}
      {% for i in range(1, 5) %}{{ i }}{% endfor %}

  Зверніть увагу, що ви повинні використовувати круглі дужки при поєднанні його з оператором фільтру
  через :ref:`правила пріоритету оператора <twig-expressions>`:

  .. code-block:: twig

      (1..5)|join(', ')

* ``~``: Перетворює всі операнди у рядки та об'єднує їх у конкатенацію. ``{{ "Hello
  " ~ name ~ "!" }}`` поверне (якщо припустити, що ``name`` - це ``'John``) ``Hello
  John!

* ``.``, ``[]``: Отримує атрибут змінної.

* ``?:``: Тернарний оператор:

  .. code-block:: twig

      {{ foo ? 'yes' : 'no' }}
      {{ foo ?: 'no' }} те ж саме, що і {{ foo ? foo : 'no' }}
      {{ foo ? 'yes' }} те ж саме, що і {{ foo ? 'yes' : '' }}

* ``??``: Оператор нульової коалесценції:

  .. code-block:: twig

      {# повертає значення foo, якщо воно не визначено і не є null, в іншому випадку - 'no' #}
      {{ foo ?? 'no' }}

* ``...``: Оператор поширення можна використовувати для розкриття послідовностей або відображень (його не можна   використовувати для розкриття аргументів виклику функції).

  .. code-block:: twig

      {% set numbers = [1, 2, ...moreNumbers] %}
      {% set ratings = {'foo': 10, 'bar': 5, ...moreRatings} %}

Оператори
~~~~~~~~~

Twig використовує оператори для виконання різних операцій у шаблонах. Розуміння пріоритету
цих операторів має вирішальне значення для написання правильних та ефективних шаблонів Twig.

Правила пріоритету операторів наступні, опреатори з найнижчим пріоритетом перераховуються першими:


=============================  =================================== =====================================================
Оператор                       Оцінка пріоритету                   Опис
=============================  =================================== =====================================================
``?:``                         0                                   Тернарний оператор, умовне твердження
``or``                         10                                  Логічна операція OR між двома булевими виразами
``and``                        15                                  Логічна операція AND між двома булевими виразами  
``b-or``                       16                                  Побітова операція OR з цілими числами
``b-xor``                      17                                  Побітова операція XOR з цілими числами
``b-and``                      18                                  Побітова операція AND з цілими числами
``==``, ``!=``, ``<=>``,       20                                  Оператори порівняння
``<``, ``>``, ``>=``,
``<=``, ``not in``, ``in``,
``matches``, ``starts with``,
``ends with``, ``has some``,
``has every``
``..``                         25                                  Діапазон значень
``+``, ``-``                   30                                  Додавання та віднімання з числами
``~``                          40                                  Конкатенація рядків
``not``                        50                                  Заперечує твердження
``*``, ``/``, ``//``, ``%``    60                                  Арифметичні операції з числами
``is``, ``is not``             100                                 Темти
``**``                         200                                 Підносить число до ступеня іншого числа
``??``                         300                                 Значення за замовчуванням коли змінна є null
``+``, ``-``                   500                                 Унарні операції з числами
``|``,``[]``,``.``             -                                   Доступ до фільтрів, послідовностей, відображень та                                                                         атрибутів
=============================  =================================== =====================================================

Без використання круглих дужок, правила пріоритету операторів використовуються для того, щоб
визначити, як перетворити код на PHP:

.. code-block:: twig

    {{ 6 b-and 2 or 6 b-and 16 }}

    {# перетворюється на наступний код PHP: (6 & 2) || (6 & 16) #}

Змініть пріоритет за замовчуванням, явно згрупувавши вирази за допомогою круглих дужок:

.. code-block:: twig

    {% set greeting = 'Hello ' %}
    {% set name = 'Fabien' %}

    {{ greeting ~ name|lower }}   {# Hello fabien #}

    {# використовувати круглі дужки для зміни пріоритету #}
    {{ (greeting ~ name)|lower }} {# hello fabien #}

.. _templates-whitespace-control-uk:

Управління пробілами
--------------------

Перший новий рядок після тегу шаблону видаляється автоматично (як в PHP).
Пробіли не модифікуються движком шаблону, тому кожен пробіл (пробіл, табуляція, 
новий рядок тощо) повертається без змін.

Ви також можете управляти пробілами на рівні тегів. Використовуючи модифікатори управління пробілами
ви можете обрізати пробіли на початку та в кінці тегів.

Twig підтримує два модифікатори:

* *Обрізання пробілів* за допомогою модифікатора ``-``: Видаляє всі пробіли
  (включно з новими рядками); 
* *Видалення пробілів в рядку* через модифікатор ``-``: Видаляє всі пробіли
  (за винятком нових рядків). Використання цього модифікатора праворуч вимикає стандартне
  видалення першого нового рядка, успадкованого від PHP.

Модифікатори можна використовувати з обох боків тегів, як у ``{%-`` або ``-%}``
і вони поглинають усі пробіли з цього боку тегу. Можна використовувати
модифікатори з одного боку тегу або з обох боків:

.. code-block:: html+twig

    {% set value = 'no spaces' %}
    {#- Без пробілів на початку та в кінці -#}
    {%- if true -%}
        {{- value -}}
    {%- endif -%}
    {# output 'no spaces' #}

    <li>
        {{ value }}    </li>
    {# виводить '<li>\n    no spaces    </li>' #}

    <li>
        {{- value }}    </li>
    {# виводить '<li>no spaces    </li>' #}

    <li>
        {{~ value }}    </li>
    {# виводить '<li>\nno spaces    </li>' #}

.. tip::

    На додаток до модифікаторів пробілів, Twig також має фільтр ``spaceless``, 
    який видаляє пробіли **між тегами HTML**:

    .. code-block:: html+twig

        {% apply spaceless %}
            <div>
                <strong>foo bar</strong>
            </div>
        {% endapply %}

        {# output will be <div><strong>foo bar</strong></div> #}

Розширення
----------

Twig можна розширювати. Якщо ви бажаєте створити власні розширення, прочитайте розділ
:ref:`Створення розширення <creating_extensions>`.

.. _`пакет Twig`:                      https://github.com/uhnomoli/PHP-Twig.tmbundle
.. _`плагін vim-twig`:                 https://github.com/lumiliet/vim-twig
.. _`плагін Twig`:                     https://github.com/pulse00/Twig-Eclipse-Plugin
.. _`визначення мови Twig`:            https://github.com/gabrielcorpse/gedit-twig-template-language
.. _`режим синтаксису Twig`:           https://github.com/bobthecow/Twig-HTML.mode
.. _`інший режим синтаксису Twig`:     https://github.com/muxx/Twig-HTML.mode
.. _`Notepad++ Twig Highlighter`:      https://github.com/Banane9/notepadplusplus-twig
.. _`web-mode.el`:                     https://web-mode.org/
.. _`регулярні вирази`:                https://www.php.net/manual/en/pcre.pattern.php
.. _`PHP-twig для atom`:               https://github.com/reesef/php-twig
.. _`TwigFiddle`:                      https://twigfiddle.com/
.. _`Twig pack`:                       https://marketplace.visualstudio.com/items?itemName=bajdzis.vscode-twig-pack
.. _`Modern Twig`:                     https://marketplace.visualstudio.com/items?itemName=Stanislav.vscode-twig
.. _`сервера мови Twigr`:              https://github.com/kaermorchen/twig-language-server/tree/master/packages/language-server
.. _`Twiggy`:                          https://marketplace.visualstudio.com/items?itemName=moetelo.twiggy
