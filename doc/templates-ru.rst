Twig для дизайнеров шаблонов
============================

Этот документ описывает синтаксис и семантику движка шаблонов и будет наиболее полезным
в качестве справочника для тех, кто создает шаблоны для Twig.

Краткое содержание
------------------

Шаблон - это обычный текстовый файл. Он может генерировать любой текстовый формат (HTML,
XML, CSV, LaTeX и т.д.). Он не имеет специального расширения, ``.html`` или ``.xml`` подойдут.

Шаблон содержит **переменные** или **выражения**, которые заменяются на
значения, когда шаблон вычисляется, и **теги**, которые управляют логикой шаблона.

Ниже приведен минимальный шаблон, который иллюстрирует некоторые основы. Дальнейшие
детали мы рассмотрим позже:

.. code-block:: html+twig

    <!DOCTYPE html>
    <html>
        <head>
            <title>My Webpage</title>
        </head>
        <body>
            <ul id="navigation">
            {% for item in navigation %}
                <li><a href="{{ item.href }}">{{ item.caption }}</a></li>
            {% endfor %}
            </ul>

            <h1>My Webpage</h1>
            {{ a_variable }}
        </body>
    </html>

Существует два вида разделителей: ``{% ... %}`` і ``{{ ... }}``. Первый
используется для выполнения утверждений, таких как for-циклы, второй - для вывода
результата выражения.

Интеграция IDE
--------------

Многие IDE поддерживают выделение синтаксиса и автозаполнение для Twig:

* *Textmate* через `пакет Twig`_
* *Vim* через `плагин vim-twig`_
* *Netbeans* (нативная, начиная с 7.2)
* *PhpStorm* (нативная, начиная с 2.1)
* *Eclipse* через `плагин Twig`_
* *Sublime Text* через `пакет Twig`_
* *GtkSourceView* через `определение языка Twig`_ (используется gedit и другими проектами)
* *Coda* та *SubEthaEdit* через `режим синтаксиса Twig`_
* *Coda 2* через `другой режим синтаксиса Twig`_
* *Komodo* та *Komodo Edit* через режим проверки выделения/синтаксиса
* *Notepad++* через `Notepad++ Twig Highlighter`_
* *Emacs* через `web-mode.el`_
* *Atom* через `PHP-twig для atom`_
* *Visual Studio Code* через `Twig pack`_, `Modern Twig`_ или `Twiggy`_

Вас также могут заинтересовать:

* `TwigFiddle`_: онлайн-сервис, который позволяет выполнять шаблоны Twig
  из браузера; он поддерживает все версии Twig

* `Сервер языка Twig`_: предоставляет некоторые возможности языка, такие как 
  выделение синтаксиса, диагностика, автозаполнение, ...

Переменные
----------

Приложение передает переменные шаблонам для манипуляций в шаблоне. 
Переменные могут иметь атрибуты или элементы, к которым вы также можете получить доступ.
Визуальное представление переменной в значительной степени зависит от приложения, которое ее предоставляет.

Используйте точку (``.``) для доступа к атрибутам переменной (методам или свойствам
PHP-объекта или элементов PHP-массива):

.. code-block:: twig

    {{ foo.bar }}

.. note::

    Важно знать, что фигурные скобки *не* являются частью переменной, 
    а являются частью утверждения print. При доступе к переменным внутри тегов
    не используйте фигурные скобки.

Если переменная или атрибут не существуют, поведение зависит от значения опции
``strict_variables`` (см. :ref:`опции среды <environment_options_strict_variables>`):

* Если ``false``, возвращает ``null``;
* Если ``true``, вызывает исключение.

.. sidebar:: Реализация

    Для удобства ``foo.bar`` выполняет следующие действия на уровне PHP:

    * проверить, является ли ``foo`` последовательностью или отображением, а ``bar`` - валидным;
    * если нет, и если ``foo`` является объектом, проверить, является ли ``bar`` валидным свойством;
    * если нет, и если ``foo`` является объектом, проверить, является ли ``bar`` валидным методом
      (даже если ``bar`` является конструктором - используйте ``__construct()`` вместо него);
    * если нет, и если ``foo`` является объектом, проверить, является ли ``getBar`` валидным методом;
    * если нет, и если ``foo`` является объектом, проверить, является ли ``isBar`` валидным методом;
    * если нет, и если ``foo`` является объектом, проверить, является ли ``hasBar`` валидным методом;
    * если нет, и если ``strict_variables`` имеет значение ``false``, вернуть ``null``;
    * если нет, то вызвать исключение.

    Twig также поддерживает особый синтаксис для доступа к элементам PHP-массивов,
    ``foo['bar']``:

    * проверить, является ли ``foo`` последовательностью или отображением, а ``bar`` - валидным элементом;
    * если нет, и если ``strict_variables`` имеет значение ``false``, вернуть ``null``;
    * если нет, то вызвать исключение.

.. note::

    Если вы хотите получить доступ к динамическому атрибуту переменной, используйте функцию
    :doc:`attribute<functions/attribute>` вместо этого.

    Функция ``attribute`` также полезна, когда атрибут содержит
    специальные символы (например, ``-``, которые интерпретируются как оператор минус):

    .. code-block:: twig

        {# эквивалентно не работающему foo.data-foo #}
        {{ attribute(foo, 'data-foo') }}

Глобальные переменные
~~~~~~~~~~~~~~~~~~~~~

Следующие переменные всегда доступны в шаблонах:

* ``_self``: ссылается на текущее имя шаблона;
* ``_context``: ссылается на текущий контекст;
* ``_charset``: ссылается на текущий набор символов.

Установка переменных
~~~~~~~~~~~~~~~~~~~~

Вы можете присваивать значения переменным внутри блоков кода. Для присвоения используется тег
:doc:`set<tags/set>`:

.. code-block:: twig

    {% set foo = 'foo' %}
    {% set foo = [1, 2] %}
    {% set foo = {'foo': 'bar'} %}

Фильтры
-------

Переменные можно изменять с помощью **фильтров**. Фильтры отделяются от переменной
символом трубы (``|``). Несколько фильтров можно соединить в цепочку. Вывод
одного фильтра применяется к следующему.

В следующем примере изымаются все HTML-теги с ``name`` и случаев заголовков:

.. code-block:: twig

    {{ name|striptags|title }}

Фильтры, которые принимают аргументы, имеют круглые скобки вокруг аргументов. В этом примере
элементы списка соединяются запятыми:

.. code-block:: twig

    {{ list|join(', ') }}

Чтобы применить фильтр к фрагменту кода, оберните его тегом
:doc:`apply<tags/apply>`:

.. code-block:: twig

    {% apply upper %}
        This text becomes uppercase
    {% endapply %}

Перейдите на страницу :doc:`filters<filters/index>`, чтобы узнать больше о встроенных
фильтрах.

Функции
-------

Для создания содержания можно вызывать функции. Функции вызываются по их имени, 
которое сопровождается круглыми скобками (``()``) и может иметь аргументы.

Например, функция ``range`` возвращает список, содержащий арифметическую прогрессию целых чисел:

.. code-block:: twig

    {% for i in range(0, 3) %}
        {{ i }},
    {% endfor %}

Перейдите на страницу :doc:`функции<functions/index>`, чтобы узнать больше о
встроенных функциях.

.. _named-arguments-ru:

Именованные аргументы
---------------------

Именованные аргументы поддерживаются в функциях, фильтрах и тестах.

.. versionadded:: 3.12

    Twig поддерживает как ``=``, так и ``:`` в качестве разделителей между именами аргументов и
    значениями, но поддержка ``:`` была представлена в Twig 3.12.

.. code-block:: twig

    {% for i in range(low: 1, high: 10, step: 2) %}
        {{ i }},
    {% endfor %}

Использование именованных аргументов делает ваши шаблоны более понятными в отношении 
значения, которые вы передаете в качестве аргументов:

.. code-block:: twig

    {{ data|convert_encoding('UTF-8', 'iso-2022-jp') }}

    {# versus #}

    {{ data|convert_encoding(from: 'iso-2022-jp', to: 'UTF-8') }}

Именованные аргументы также позволяют вам пропустить некоторые аргументы, для которых вы не хотите 
изменять значения по умолчанию:

.. code-block:: twig

    {# первый аргумент - это формат даты, который по умолчанию имеет значение глобального формата данных, если передан null #}
    {{ "now"|date(null, "Europe/Paris") }}

    {# или пропустить значение формата, используя именованный аргумент для часового пояса #}
    {{ "now"|date(timezone: "Europe/Paris") }}

Вы также можете использовать как позиционные, так и именованные аргументы в одном вызове. В этом случае
позиционные аргументы всегда должны быть перед именованными:

.. code-block:: twig

    {{ "now"|date('d/m/Y H:i', timezone: "Europe/Paris") }}

.. tip::

    Каждая страница документации функции, фильтра и теста имеет раздел, где перечислены названия
    всех поддерживаемых аргументов.

Структура управления
--------------------

Структура управления - это все то, что контролирует ход выполнения программы - условные операторы (то есть ``if``/`elseif``/`else``), циклы ``for``, а также такие вещи, как блоки. Структуры
управления появляются внутри блоков ``{% ... %}``.

Например, чтобы отобразить список пользователей, содержащийся в переменной с названием
``users``, используйте тег :doc:`for<tags/for>`:

.. code-block:: html+twig

    <h1>Members</h1>
    <ul>
        {% for user in users %}
            <li>{{ user.username|e }}</li>
        {% endfor %}
    </ul>

Тег :doc:`if<tags/if>` может быть использован для тестирования выражения:

.. code-block:: html+twig

    {% if users|length > 0 %}
        <ul>
            {% for user in users %}
                <li>{{ user.username|e }}</li>
            {% endfor %}
        </ul>
    {% endif %}

Перейдите на страницу :doc:`теги<tags/index>`, чтобы узнать больше о встроенных тегах.

Комментарии
-----------

Чтобы прокомментировать часть строки в шаблоне, используйте синтаксис комментариев ``{# ... ...
#}``. Это полезно для отладки или для добавления информации для других дизайнеров шаблона
или для вас самих:

.. code-block:: twig

    {# примечание: шаблон отключен, поскольку мы больше не используем его
        {% for user in users %}
            ...
        {% endfor %}
    #}

Добавление других шаблонов
--------------------------

Функция :doc:`include<functions/include>` полезна для добавления шаблона
и возвращения отображенного содержания этого шаблона в текущий шаблон:

.. code-block:: twig

    {{ include('sidebar.html') }}

По умолчанию, добавленные шаблоны имеют доступ к тому же контексту, что и шаблон
который их включает. Это означает, что любая переменная, определенная в главном шаблоне,
будет доступна и в добавленном шаблоне:

.. code-block:: twig

    {% for box in boxes %}
        {{ include('render_box.html') }}
    {% endfor %}

Добавленный шаблон ``render_box.html`` имеет доступ к переменной ``box``.

Имя шаблона зависит от загрузчика шаблонов. Например, шаблон
``\Twig\Loader\FilesystemLoader`` позволяет получить доступ к другим шаблонам,
указав имя файла. Вы можете получить доступ к шаблонам в подкаталогах с помощью слэша:

.. code-block:: twig

    {{ include('sections/articles/sidebar.html') }}

Это поведение зависит от приложения, в которое встраивается Twig.

Наследование шаблона
--------------------

Самая мощная часть Twig - это наследование шаблонов. Наследование шаблонов
позволяет вам создать базовый "скелет" шаблона, который содержит все общие
элементы вашего сайта и определяет **блоки**, которые дочерние шаблоны могут
переопределять.

Проще понять концепцию, начав с примера.

Давайте определим базовый шаблон ``base.html``, который определяет скелет HTML-документа,
который может быть использован для страницы с двумя колонками:

.. code-block:: html+twig

    <!DOCTYPE html>
    <html>
        <head>
            {% block head %}
                <link rel="stylesheet" href="style.css"/>
                <title>{% block title %}{% endblock %} - My Webpage</title>
            {% endblock %}
        </head>
        <body>
            <div id="content">{% block content %}{% endblock %}</div>
            <div id="footer">
                {% block footer %}
                    &copy; Copyright 2011 by <a href="https://example.com/">you</a>.
                {% endblock %}
            </div>
        </body>
    </html>

В этом примере теги :doc:`block<tags/block>` определяют четыре блока, которые
дочерние шаблоны могут заполнять. Все, что делает тег ``block`` - сообщает
движку шаблонов, что дочерний шаблон может переопределить эти части шаблона.

Дочерний шаблон может иметь такой вид:

.. code-block:: html+twig

    {% extends "base.html" %}

    {% block title %}Index{% endblock %}
    {% block head %}
        {{ parent() }}
        <style type="text/css">
            .important { color: #336699; }
        </style>
    {% endblock %}
    {% block content %}
        <h1>Index</h1>
        <p class="important">
            Welcome to my awesome homepage.
        </p>
    {% endblock %}

Ключевым здесь является тег :doc:`extends<tags/extends>`. Он сообщает движку шаблонов,
что этот шаблон "расширяет" другой шаблон. Когда система шаблонов оценивает этот шаблон,
сначала она находит родительский шаблон. Тег extends должен быть первым тегом в шаблоне.

Заметьте, что поскольку дочерний шаблон не определяет блок ``footer``, 
вместо него используется значение из родительского шаблона.

Вы можете отобразить содержание родительского блока с помощью функции
:doc:`parent<functions/parent>`. Она возвращает результаты родительского блока:

.. code-block:: html+twig

    {% block sidebar %}
        <h3>Table Of Contents</h3>
        ...
        {{ parent() }}
    {% endblock %}

.. tip::

    Страница документации для тега :doc:`extends<tags/extends>` описывает
    более расширенные возможности, такие как вложение блоков, область видимости,
    динамическое наследование и условное наследование.

.. note::

    Twig также поддерживает множественное наследование через "горизонтальное
    повторное использование" с помощью тега :doc:`use<tags/use>`.

Экранирование HTML
------------------

При генерировании HTML на основе шаблонов всегда существует риск того, что переменная будет содержать символы, которые повлияют на результирующий HTML. Существует два подхода: вручную экранировать каждую переменную или автоматически экранировать все по умолчанию.

Twig поддерживает оба подхода, автоматическое экранирование включено по умолчанию.

Стратегию автоматического экранирования можно настроить с помощью опции 
:ref:`autoescape<environment_options>` и по умолчанию она равна ``html``.

Работа с экранированием вручную
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Если включено ручное экранирование, вы несете ответственность за экранирование переменных,
если это необходимо. Что экранировать любую переменную, полученную из ненадежного источника.

Экранирование работает с помощью :doc:`escape<filters/escaping>` или фильтра ``e``:

.. code-block:: twig

    {{ user.username|e }}

По умолчанию фильтр ``escape`` использует стратегию ``html``, но в зависимости от
контекста экранирования, вы можете явно использовать другую стратегию:

.. code-block:: twig

    {{ user.username|e('js') }}
    {{ user.username|e('css') }}
    {{ user.username|e('url') }}
    {{ user.username|e('html_attr') }}

Работа с автоматическим экранированием
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Независимо от того, включено автоматическое экранирование или нет, вы можете обозначить
нужно ли экранировать раздел шаблона, с помощью тега :doc:`autoescape<tags/autoescape>`:

.. code-block:: twig

    {% autoescape %}
        В этом блоке все будет автоматически экранировано (используя стратегию HTML)
    {% endautoescape %}

По умолчанию для автоматического экранирования используется стратегия экранирования
``html``. Если вы выводите переменные в других контекстах, вам следует явно экранировать их с помощью
соответствующей стратегии экранирования:

.. code-block:: twig

    {% autoescape 'js' %}
        В этом блоке все будет автоматически экранировано (используя стратегию JS)
    {% endautoescape %}

Экранирование
-------------

Иногда желательно или даже необходимо, чтобы Twig игнорировал части, которые в противном случае обрабатывались бы как переменные или блоки. Например, если используется синтаксис по умолчанию, и 
вы хотите использовать ``{{`` как сырую строку в шаблоне, а не создавать переменную, вам 
придется прибегнуть к хитрости.

Самый простой способ - вывести разделитель переменной (``{{``) с помощью переменной выражения:

.. code-block:: twig

    {{ '{{' }}

Для больших разделов имеет смысл обозначить блок :doc:`verbatim<tags/verbatim>``.

Макрос
------

Макросы можно сравнить с функциями в обычных языках программирования. Они полезны 
для повторного использования фрагментов HTML, чтобы не повторяться. Они описаны в 
документации тега  :doc:`macro<tags/macro>`.

.. _twig-expressions-ru:

Выражения
---------

Twig позволяет выражения везде.

Литералы
~~~~~~~~

Простейшей формой выражений являются литералы. Литералы - это представление таких типов PHP, как строки, числа и массивы.Существуют следующие литералы:

  * ``"Hello World"``: Все, что находится между двумя двойными или одинарными кавычками,
    является строкой. Они   полезны, когда вам нужна строка в шаблоне (например, в качестве
    аргументов вызовов функций, фильтров или просто для расширения или добавления шаблона).

  Обратите внимание, что некоторые символы требуют экранирования:
   * ``\f``: Подача формы
   * ``\n``: Новая строка
   * ``\r``: Возврат каретки
   * ``\t``: Горизонтальная вкладка
   * ``\v``: Вертикальная вкладка
   * ``\x``: Шестнадцатеричная последовательность экранирования
   * ``\\0`` до ``\377``: Восьмеричные экранированные последовательности, представляющие символы
   * ``\``: Обратный слэш
  
  При использовании строк в одинарных кавычках, символ одинарных кавычек (``'``) следует экранировать обратным слэшем (``\'``).
  При использовании строк в двойных кавычках символ двойных кавычек (``"``) следует экранировать обратным слешем (``\"``).

  Например, строка в одинарных кавычках может содержать разделитель, если перед ней стоит
  обратный слэш (``\``) - как в строке ``'It\'s good'``. Если строка содержит символ
  обратного слэша (например, ``'c:\Program Files'``), экранируйте ее, путем удвоения
  (например, ``'c:\\Program Files'``).

  * ``42`` / ``42.23``: Целые числа и числа с плавающей запятой создаются путем
  записи числа. Если присутствует точка, то число является числом с плавающей запятой,
  иначе - целым числом.

  * ``["foo", "bar"]``: Последовательности определяются последовательностью выражений,
  разделенных запятой (``,``) и обернутых в квадратные скобки (``[]``).

  * ``{"foo": "bar"}``: Отображения определяются списком ключей и значений,
  разделенных запятой (``,``) и обернутых в фигурные скобки (``{}``):  

  .. code-block:: twig

    {# ключи как строки #}
    {'foo': 'foo', 'bar': 'bar'}

    {# ключи как имена (эквивалентно предыдущему отображению) #}
    {foo: 'foo', bar: 'bar'}

    {# ключи как целые числа #}
    {2: 'foo', 4: 'bar'}

    {# ключ можно опустить, если он такой же как имя переменной #}
    {foo}
    {# эквивалентно следующему #}
    {'foo': foo}

    {# ключи как выражения (выражение должно быть обернуто в круглые скобки) #}
    {% set foo = 'foo' %}
    {(foo): 'foo', (1 + 1): 'bar', (foo ~ 'b'): 'baz'}

* ``true`` / ``false``: ``true`` представляет правильное значение, ``false`` представляет
  ложное значение.

* ``null``: ``null`` не представляет конкретного значения. Это значение, которое возвращается, если
  переменная не существует. ``none`` является псевдонимом ``null``.

Последовательности и отображения могут быть вложены:

.. code-block:: twig

    {% set foo = [1, {"foo": "bar"}] %}

.. tip::

    Использование строк в двойных или одинарных кавычках не влияет на производительность,
    но :ref:`интерполяция строк <templates-string-interpolation>` поддерживается только
    в строках в двойных кавычках.

.. _templates-string-interpolation-ru:

Интерполяция строк
~~~~~~~~~~~~~~~~~~

Интерполяция строки (``#{expression}``) позволяет выводить любое валидное выражение
внутри *строки в двойных кавычках*. Результат вычисления этого выражения
вставляется в строку:

.. code-block:: twig

    {{ "foo #{bar} baz" }}
    {{ "foo #{1 + 2} baz" }}

.. tip::

    Интерполяцию строк можно игнорировать, экранируя их обратным слэшем
    (``\``):

    .. code-block:: twig

        {# виводить foo #{1 + 2} baz #}
        {{ "foo \#{1 + 2} baz" }}

Математика
~~~~~~~~~~

Twig позволяет вам выполнять математические действия в шаблонах; поддерживаются следующие операторы:

* ``+``: Добавляет два числа вместе (операнды превращаются в числа). ``{{
  1 + 1 }}`` будет ``2``.

* ``-``: Вычитаем второе число из первого. ``{{ 3 - 2 }}`` будет
  ``1``.

* ``/``: Делит два числа. Возвращаемое значение будет числом с плавающей запятой.
  ``{{ 1 / 2 }}`` будет ``{{ 0.5 }}``.

* ``%``: Вычисляет остаток от целочисленного деления. ``{{ 11 % 7 }}`` будет
  ``4``.

* ``//``: Делит два числа и возвращает результат в виде целого числа с плавающей запятой. ``{{ 20
  // 7 }}`` будет ``2``, ``{{ -20 // 7 }}`` будет ``-3`` (это лишь синтаксический сахар
  для фильтра :doc:`round<filters/round>`).

* ``*``: Умножает левый операнд на правый. ``{{ 2 * 2 }}`` 
  вернет ``4``.

* ``**``: Возводит левый операнд в степень правого операнда. ``{{ 2 ** 3 }}`` вернет ``8``.

.. _template_logic-ru:

Логика
~~~~~~

Вы можете объединить несколько выражений с помощью следующих операторов:

* ``and``: Возвращает true, если левый и правый операнды являются истинными.

* ``or``: Возвращает true, если левый или правый операнд являются истинными.

* ``not``: Отрицает оператор.

* ``(expr)``: Группирует выражение.

.. note::

    Twig также поддерживает побитовые операторы (``b-and``, ``b-xor``, и ``b-or``).

.. note::

    Операторы чувствительны к регистру.

Сравнения
~~~~~~~~~

В любом выражении поддерживаются следующие операторы сравнения: ``==``,
``!=``, ``<``, ``>``, ``>=`` і ``<=``.

Проверить, соединяется ли строка ``starts with`` или ``ends with`` с другой строкой:

.. code-block:: twig

    {% if 'Fabien' starts with 'F' %}
    {% endif %}

    {% if 'Fabien' ends with 'n' %}
    {% endif %}

Проверить, содержит ли строка другую строку, можно с помощью оператора охвата (см.
следующий раздел).

.. note::

    Для сложных сравнений строк оператор ``matches`` позволяет использовать
    ``регулярные выражения``:

    .. code-block:: twig

        {% if phone matches '/^[\\d\\.]+$/' %}
        {% endif %}

Проверить, что последовательность или отображение ``has every`` или ``has some`` из своих элементов и 
вернуть ``true``, используя функцию стрелки. Функция стрелки получает
значение последовательности или отображения:

.. code-block:: twig

    {% set sizes = [34, 36, 38, 40, 42] %}

    {% set hasOnlyOver38 = sizes has every v => v > 38 %}
    {# hasOnlyOver38 is false #}

    {% set hasOver38 = sizes has some v => v > 38 %}
    {# hasOver38 is true #}

Оператор охвата
~~~~~~~~~~~~~~~

Оператор ``in`` выполняет проверку на охват. Он возвращает значение ``true``, если левый
операнд содержится в правом:

.. code-block:: twig

    {# returns true #}

    {{ 1 in [1, 2, 3] }}

    {{ 'cd' in 'abcde' }}

.. tip::

    Вы можете использовать этот фильтр для выполнения теста на охват для строк,
    последовательностей, отображений или объектов, реализующих интерфейс ``Traversable``.

Чтобы выполнить отрицательный тест, используйте оператор ``not in``:

.. code-block:: twig

    {% if 1 not in [1, 2, 3] %}

    {# эквивалентно #}
    {% if not (1 in [1, 2, 3]) %}

Оператор тестирования
~~~~~~~~~~~~~~~~~~~~~

Оператор ``is`` выполняет тесты. Тесты можно использовать для проверки переменной на соответствие
общему выражению. Правый операнд является именем теста:

.. code-block:: twig

    {# выяснить, является ли переменная нечетной #}

    {{ name is odd }}

Тесты могут также принимать аргументы:

.. code-block:: twig

    {% if post.status is constant('Post::PUBLISHED') %}

Тесты можно отрицать с помощью оператора ``is not``:

.. code-block:: twig

    {% if post.status is not constant('Post::PUBLISHED') %}

    {# эквивалентно #}
    {% if not (post.status is constant('Post::PUBLISHED')) %}

Перейдите на страницу :doc:`тесты<tests/index>`, чтобы узнать больше о встроенных
тестах.

Другие операторы
~~~~~~~~~~~~~~~~

Следующие операторы не подпадают ни под одну из других категорий:

* ``|``: Применяет фильтр.

* ``..``: Создает последовательность на основе операнда до и после оператора
  (это синтаксический сахар для фукнции :doc:`range<functions/range>`):

  .. code-block:: twig

      {% for i in 1..5 %}{{ i }}{% endfor %}

      {# эквивалентно #}
      {% for i in range(1, 5) %}{{ i }}{% endfor %}

  Обратите внимание, что вы должны использовать круглые скобки при сочетании его с оператором фильтра
  через :ref:`правила приоритета оператора <twig-expressions>`:

  .. code-block:: twig

      (1..5)|join(', ')

* ``~``: Преобразует все операнды в строки и объединяет их в конкатенацию. ``{{ "Hello
  " ~ name ~ "!" }}`` вернет (если предположить, что  ``name`` - это ``'John``) ``Hello
  John!

* ``.``, ``[]``: Получает атрибут переменной.

* ``?:``: Тернарный оператор:

  .. code-block:: twig

      {{ foo ? 'yes' : 'no' }}
      {{ foo ?: 'no' }} то же самое, что и {{ foo ? foo : 'no' }}
      {{ foo ? 'yes' }} то же самое, что и {{ foo ? 'yes' : '' }}

* ``??``: Оператор нулевой коалесценции:

  .. code-block:: twig

      {# возвращает значение foo, если оно не определено и не является null, в противном случае - 'no' #}
      {{ foo ?? 'no' }}

* ``...``: Оператор распространения можно использовать для раскрытия последовательностей или отображений (его нельзя использовать для раскрытия аргументов вызова функции).

  .. code-block:: twig

      {% set numbers = [1, 2, ...moreNumbers] %}
      {% set ratings = {'foo': 10, 'bar': 5, ...moreRatings} %}

Операторы
~~~~~~~~~

Twig использует операторы для выполнения различных операций в шаблонах. Понимание приоритета
этих операторов имеет решающее значение для написания правильных и эффективных шаблонов Twig.

Правила приоритета операторов следующие, операторы с самым низким приоритетом перечисляются первыми:

=============================  =================================== =====================================================
Оператор                       Оценка приоритетп                   Описание
=============================  =================================== =====================================================
``?:``                         0                                   Тернарный оператор, условное утверждение
``or``                         10                                  Логическая операция OR между двумя булевыми                                                                       выражениями
``and``                        15                                  Логическая операция AND между двумя булевыми                                                                      выражениями
``b-or``                       16                                  Побитовая операция OR с целыми числами
``b-xor``                      17                                  Побитовая операция XOR с целыми числами
``b-and``                      18                                  Побитовая операция AND с целыми числами
``==``, ``!=``, ``<=>``,       20                                  Операторы сравения
``<``, ``>``, ``>=``,
``<=``, ``not in``, ``in``,
``matches``, ``starts with``,
``ends with``, ``has some``,
``has every``
``..``                         25                                  Диапазон значений
``+``, ``-``                   30                                  Сложение и вычитание с числами
``~``                          40                                  Конкатенация строк
``not``                        50                                  Отрицает утверждение
``*``, ``/``, ``//``, ``%``    60                                  Арифметические операции с числами
``is``, ``is not``             100                                 Тесты
``**``                         200                                 Возводит число в степень другого числа
``??``                         300                                 Значение по умолчанию, когда переменная                                                                           является null
``+``, ``-``                   500                                 Унарные операции с числами
``|``,``[]``,``.``             -                                   Доступ к фильтрам, последовательностям,                                                                           отображениям и атрибутам
=============================  =================================== =====================================================

Без использования круглых скобок, правила приоритета операторов используются для того, чтобы
определить, как преобразовать код в PHP:

.. code-block:: twig

    {{ 6 b-and 2 or 6 b-and 16 }}

    {# преобразуется в следующий код PHP: (6 & 2) || (6 & 16) #}

Измените приоритет по умолчанию, явно сгруппировав выражения с помощью круглых скобок:

.. code-block:: twig

    {% set greeting = 'Hello ' %}
    {% set name = 'Fabien' %}

    {{ greeting ~ name|lower }}   {# Hello fabien #}

    {# использовать круглые скобки для изменения приоритета #}
    {{ (greeting ~ name)|lower }} {# hello fabien #}

.. _templates-whitespace-control-ru:

Управление пробелами
--------------------

Первая новая строка после тега шаблона удаляется автоматически (как в PHP).
Пробелы не модифицируются движком шаблона, поэтому каждый пробел (пробел, табуляция, 
новая строка и т.д.) возвращается без изменений.

Вы также можете управлять пробелами на уровне тегов. Используя модификаторы управления пробелами,
вы можете обрезать пробелы в начале и в конце тегов.

Twig поддерживает два модификатора:

* *Обрезание пробелов* с помощью модификатора ``-``: Удаляет все пробелы
  (включая новые строки); 
* *Удаление пробелов в строке* через модификатор ``-``: Удаляет все пробелы
  (за исключением новых строк). Использование этого модификатора справа отключает стандартное
  удаление первой новой строки, унаследованного от PHP.

Модификаторы можно использовать с обеих сторон тегов, как в ``{%-`` или ``-%}``.
и они поглощают все пробелы с этой стороны тега. Можно использовать
модификаторы с одной стороны тега или с обеих сторон:

.. code-block:: html+twig

    {% set value = 'no spaces' %}
    {#- Без пробелов сначала и в конце -#}
    {%- if true -%}
        {{- value -}}
    {%- endif -%}
    {# output 'no spaces' #}

    <li>
        {{ value }}    </li>
    {# выводит '<li>\n    no spaces    </li>' #}

    <li>
        {{- value }}    </li>
    {# выводит '<li>no spaces    </li>' #}

    <li>
        {{~ value }}    </li>
    {# выводит '<li>\nno spaces    </li>' #}

.. tip::

    В дополнение к модификаторам пробелов, Twig также имеет фильтр ``spaceless``, 
    который удаляет пробелы **между тегами HTML**:

    .. code-block:: html+twig

        {% apply spaceless %}
            <div>
                <strong>foo bar</strong>
            </div>
        {% endapply %}

        {# output will be <div><strong>foo bar</strong></div> #}

Расширение
----------

Twig можно расширять. Если вы хотите создать собственные расширения, прочтите раздел
:ref:`Создание расширения <creating_extensions>`.

.. _`пакет Twig`:                      https://github.com/uhnomoli/PHP-Twig.tmbundle
.. _`плагин vim-twig`:                 https://github.com/lumiliet/vim-twig
.. _`плагин Twig`:                     https://github.com/pulse00/Twig-Eclipse-Plugin
.. _`определение языка Twig`:            https://github.com/gabrielcorpse/gedit-twig-template-language
.. _`режим синтаксиса Twig`:           https://github.com/bobthecow/Twig-HTML.mode
.. _`другой режим синтаксиса Twig`:     https://github.com/muxx/Twig-HTML.mode
.. _`Notepad++ Twig Highlighter`:      https://github.com/Banane9/notepadplusplus-twig
.. _`web-mode.el`:                     https://web-mode.org/
.. _`регулярные выражения`:                https://www.php.net/manual/en/pcre.pattern.php
.. _`PHP-twig для atom`:               https://github.com/reesef/php-twig
.. _`TwigFiddle`:                      https://twigfiddle.com/
.. _`Twig pack`:                       https://marketplace.visualstudio.com/items?itemName=bajdzis.vscode-twig-pack
.. _`Modern Twig`:                     https://marketplace.visualstudio.com/items?itemName=Stanislav.vscode-twig
.. _`сервер языка Twig`:              https://github.com/kaermorchen/twig-language-server/tree/master/packages/language-server
.. _`Twiggy`:                          https://marketplace.visualstudio.com/items?itemName=moetelo.twiggy
