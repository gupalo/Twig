``macro``
=========

Макроси можна порівняти з функціями у звичайних мовах програмування. Вони
корисні для повторного використання фрагментів шаблонів, щоб не повторюватися.

Макроси визначаються у звичайних шаблонах.

Уявіть, що у вас є загальний допоміжний шаблон, який визначає, як відображати HTML-форми
за допомогою макросів (який називається ``forms.twig``):

.. code-block:: html+twig

    {% macro input(name, value, type = "text", size = 20) %}
        <input type="{{ type }}" name="{{ name }}" value="{{ value|e }}" size="{{ size }}"/>
    {% endmacro %}

    {% macro textarea(name, value, rows = 10, cols = 40) %}
        <textarea name="{{ name }}" rows="{{ rows }}" cols="{{ cols }}">{{ value|e }}</textarea>
    {% endmacro %}

Кожен аргумент макросу може мати значення за замовчуванням (тут ``text`` є значенням за замовчуванням
для ``type``, якщо його не надано у виклику).

Макроси відрізняються від нативних функцій PHP кількома способами:

* Аргументи макросу завжди необов'язкові.

* Якщо у макрос передаються додаткові позиційні аргументи, вони потрапляють
  у спеціальну змінну ``varargs`` у вигляді списку значень.

Але, як і у випадку з функціями PHP, макроси не мають доступу до змінних поточного шаблону.

.. tip::

Ви можете передати весь контекст як аргумент, використовуючи спеціальну змінну змінну ``_context``.

Імпорт макросів
---------------

Існує два способи імпорту макросів. Ви можете імпортувати весь шаблон,
що містить макроси, у локальну змінну (за допомогою тегу ``import``) або 
імпортувати тільки певні макроси з шаблону (за допомогою тегу ``from``).

Щоб імпортувати усі макроси з шаблону до локальної змінної, використовуйте тег ``import``:

.. code-block:: twig

    {% import "forms.twig" as forms %}

Вищенаведений виклик ``import`` імпортує файл ``forms.twig`` (який може містити
тільки макроси або шаблон і деякі макроси), і імпортує макроси як елементи
локальної змінної ``forms``.

Потім, за бажанням, макроси можна викликати у *поточному* шаблоні:

.. code-block:: html+twig

    <p>{{ forms.input('username') }}</p>
    <p>{{ forms.input('password', null, 'password') }}</p>

Альтернативно ви можете імпортувати імена з шаблону до поточного простору імен
за допомогою тегу ``from``:

.. code-block:: html+twig

    {% from 'forms.twig' import input as input_field, textarea %}

    <p>{{ input_field('password', '', 'password') }}</p>
    <p>{{ textarea('comment') }}</p>

.. caution::

    Оскільки макроси, імпортовані за допомогою ``from``, викликаються як функції, 
    будьте обережні, щоб вони не перекривали існуючі функції:

    .. code-block:: twig

        {% from 'forms.twig' import input as include %}

        {# включення посилається на макрос, а не на вбудовану функцію "include" #}
        {{ include() }}

.. tip::

    Коли макроси та їх визначення знаходяться в одному шаблоні, вам не потрібно
    імпортувати макроси, оскільки вони автоматично доступні у спеціальній змінній
    ``_self``:

    .. code-block:: html+twig

        <p>{{ _self.input('password', '', 'password') }}</p>

        {% macro input(name, value, type = "text", size = 20) %}
            <input type="{{ type }}" name="{{ name }}" value="{{ value|e }}" size="{{ size }}"/>
        {% endmacro %}

Область дії макросів
--------------------

Правила визначення області дії однакові, незалежно від того, чи ви імпортували макроси
за допомогою ``import`` або ``from``.

Імпортовані макроси завжди є **локальними** для поточного шаблону. Це означає, що
макроси доступні у всіх блоках та інших макросах, визначених у поточному
шаблоні, але вони недоступні у включених шаблонах або дочірніх шаблонах;
вам потрібно явно повторно імпортувати макроси в кожному шаблоні.

Імпортовані макроси недоступні в тілі тегів ``embed``, вам потрібно
явно повторно імпортувати макроси всередині тегу.

При виклику ``import`` або ``from`` з тегу ``block`` імпортовані макроси
визначено лише у поточному блоці, і вони перекривають макроси, визначені на рівні 
шаблону з тими самими іменами.

Перевірка, чи визначено макрос
------------------------------

Перевірити, чи визначено макрос, можна за допомогою тесту ``defined``:

.. code-block:: twig

    {% import "macros.twig" as macros %}

    {% from "macros.twig" import hello %}

    {% if macros.hello is defined -%}
        OK
    {% endif %}

    {% if hello is defined -%}
        OK
    {% endif %}

Іменовані кінцеві теги макросів
-------------------------------

Twig дозволяє вам розміщувати ім'я макросу після кінцевого тегу для кращої
читабельності ( ім'я після слова ``endmacro`` має збігатися з ім'ям макросу):

.. code-block:: twig

    {% macro input() %}
        ...
    {% endmacro input %}
