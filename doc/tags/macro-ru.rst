``macro``
=========

Макросы можно сравнить с функциями в обычных языках программирования. Они полезны для
повторного использования фрагментов шаблонов, чтобы не повторяться.

Макросы определяются в обычных шаблонах.

Представьте, что у вас есть общий вспомогательный шаблон, который определяет, как
отображать HTML-формы с помощью макросов (который называется ``forms.twig``):

.. code-block:: html+twig

    {% macro input(name, value, type = "text", size = 20) %}
        <input type="{{ type }}" name="{{ name }}" value="{{ value|e }}" size="{{ size }}"/>
    {% endmacro %}

    {% macro textarea(name, value, rows = 10, cols = 40) %}
        <textarea name="{{ name }}" rows="{{ rows }}" cols="{{ cols }}">{{ value|e }}</textarea>
    {% endmacro %}

Каждый аргумент макроса может иметь значение по умолчанию (здесь ``text`` является значением по умолчанию
для ``type``, если оно не предоставлено в вызове).

Макросы отличаются от нативных функций PHP несколькими особенностями:

* Аргументы макроса всегда необязательны.

* Если в макрос передаются дополнительные позиционные аргументы, они попадают
  в специальную переменную ``varargs`` в виде списка значений.

Но, как и в случае с функциями PHP, макросы не имеют доступа к переменным текущего шаблона.

.. tip::

Вы можете передать весь контекст как аргумент, используя специальную переменную ``_context``.

Импорт макросов
---------------

Существует два способа импорта макросов. Вы можете импортировать весь шаблон,
содержащий макросы, в локальную переменную (с помощью тега ``import``) или 
импортировать только определенные макросы из шаблона (с помощью тега ``from``).

Чтобы импортировать все макросы из шаблона в локальную переменную, используйте тег ``import``:

.. code-block:: twig

    {% import "forms.twig" as forms %}

Вышеприведенный вызов ``import`` импортирует файл ``forms.twig`` (который может содержать
только макросы или шаблон и некоторые макросы), и импортирует макросы как элементы
локальной переменной ``forms``.

Затем, по желанию, макросы можно вызывать в *текущем* шаблоне:

.. code-block:: html+twig

    <p>{{ forms.input('username') }}</p>
    <p>{{ forms.input('password', null, 'password') }}</p>

Альтернативно вы можете импортировать имена из шаблона в текущее пространство имен
с помощью тега ``from``:

.. code-block:: html+twig

    {% from 'forms.twig' import input as input_field, textarea %}

    <p>{{ input_field('password', '', 'password') }}</p>
    <p>{{ textarea('comment') }}</p>

.. caution::

    Поскольку макросы, импортированные с помощью ``from``, вызываются как функции, 
    будьте осторожны, чтобы они не перекрывали существующие функции:

    .. code-block:: twig

        {% from 'forms.twig' import input as include %}

        {# включение ссылается на макрос, а не на встроенную функцию "include" #}
        {{ include() }}

.. tip::

    Когда макросы и их определения находятся в одном шаблоне, вам не нужно
    импортировать макросы, поскольку они автоматически доступны в специальной
    переменной ``_self``:

    .. code-block:: html+twig

        <p>{{ _self.input('password', '', 'password') }}</p>

        {% macro input(name, value, type = "text", size = 20) %}
            <input type="{{ type }}" name="{{ name }}" value="{{ value|e }}" size="{{ size }}"/>
        {% endmacro %}

Область действия макросов
-------------------------

Правила определения области действия одинаковы, независимо от того, импортировали вы макросы
с помощью ``import`` или ``from``.

Импортированные макросы всегда являются **локальными** для текущего шаблона. Это означает, что
макросы доступны во всех блоках и других макросах, определенных в текущем
шаблоне, но они недоступны во включенных шаблонах или дочерних шаблонах;
вам нужно явно повторно импортировать макросы в каждом шаблоне.

Импортированные макросы недоступны в теле тегов ``embed``, вам нужно
явно повторно импортировать макросы внутри тега.

При вызове ``import`` или ``from`` из тега ``block``, импортированные макросы
определены только в текущем блоке, и они перекрывают макросы, определенные на уровне 
шаблона с теми же именами.

Проверка того, определен ли макрос
----------------------------------

Проверить, определен ли макрос, можно с помощью теста ``defined``:

.. code-block:: twig

    {% import "macros.twig" as macros %}

    {% from "macros.twig" import hello %}

    {% if macros.hello is defined -%}
        OK
    {% endif %}

    {% if hello is defined -%}
        OK
    {% endif %}

Именованные конечные теги макросов
----------------------------------

Twig позволяет вам размещать имя макроса после конечного тега для лучшей
читабельности (имя после слова ``endmacro`` должно совпадать с именем макроса):

.. code-block:: twig

    {% macro input() %}
        ...
    {% endmacro input %}
