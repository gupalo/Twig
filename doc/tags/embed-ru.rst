``embed``
=========

Тег ``embed`` объединяет поведение тегов :doc:`include<include>` и
:doc:`extends<extends>`. Он позволяет добавлять содержание другого шаблона так же, как
это делает тег ``include``. Но он также позволяет переопределить любой блок,
определенный внутри добавленного шаблона, как при расширении шаблона.

Думайте о встроенном шаблоне как о "скелете микро-макета".

.. code-block:: twig

    {% embed "teasers_skeleton.twig" %}
        {# Эти блоки определены в "teasers_skeleton.twig" #}
        {# и мы переопределим их прямо тут:                    #}
        {% block left_teaser %}
            Some content for the left teaser box
        {% endblock %}
        {% block right_teaser %}
            Some content for the right teaser box
        {% endblock %}
    {% endembed %}

Тег ``embed`` переносит идею наследования шаблона на уровень
фрагментов контента. В то время как наследование шаблонов позволяет создавать "скелеты документов", 
которые наполняются жизнью с помощью дочерних шаблонов, тег ``embed`` позволяет вам
создавать "скелеты" для меньших единиц содержания и повторно использовать и наполнять их
где угодно.

Поскольку вариант использования может быть неочевидным, давайте рассмотрим упрощенный пример.
Представьте себе базовый шаблон, общий для нескольких HTML-страниц, который определяет один блок
под названием "содержание":

.. code-block:: text

    ┌─── page layout ─────────────────────┐
    │                                     │
    │           ┌── block "content" ──┐   │
    │           │                     │   │
    │           │                     │   │
    │           │ (child template to  │   │
    │           │  put content here)  │   │
    │           │                     │   │
    │           │                     │   │
    │           └─────────────────────┘   │
    │                                     │
    └─────────────────────────────────────┘

Некоторые страницы ("foo" и "bar") имеют одинаковую структуру содержания -
два вертикально расположенных поля:

.. code-block:: text

    ┌─── page layout ─────────────────────┐
    │                                     │
    │           ┌── block "content" ──┐   │
    │           │ ┌─ block "top" ───┐ │   │
    │           │ │                 │ │   │
    │           │ └─────────────────┘ │   │
    │           │ ┌─ block "bottom" ┐ │   │
    │           │ │                 │ │   │
    │           │ └─────────────────┘ │   │
    │           └─────────────────────┘   │
    │                                     │
    └─────────────────────────────────────┘

В то время как другие страницы ("boom" и "baz") имеют другую структуру контента -
два поля рядом:

.. code-block:: text

    ┌─── page layout ─────────────────────┐
    │                                     │
    │           ┌── block "content" ──┐   │
    │           │                     │   │    
    │           │ ┌ block ┐ ┌ block ┐ │   │
    │           │ │"left" │ │"right"│ │   │
    │           │ │       │ │       │ │   │
    │           │ │       │ │       │ │   │
    │           │ └───────┘ └───────┘ │   │
    │           └─────────────────────┘   │
    │                                     │
    └─────────────────────────────────────┘

Без тега ``embed`` у вас есть два способа создания шаблонов:

* Создать два "промежуточных" базовых шаблона, которые расширяют основной макет
  шаблона: один с вертикально расположенными полями для использования на страницах "foo" и
  "bar", а другой - с расположенными рядом полями для страниц "boom" и
  "baz".

* Встроить разметку для верхнего/нижнего и левого/правого полей непосредственно в 
  шаблон каждой страницы.

Эти два решения не очень хорошо масштабируются, поскольку каждое из них имеет существенный недостаток:

* Первое решение действительно может работать для этого упрощенного примера. Но представьте, что
  мы добавляем боковую панель, которая снова может содержать различные, повторяющиеся структуры
  содержания. Теперь нам нужно будет создать промежуточные базовые шаблоны для всех возможных
  комбинаций структуры содержания и структуры боковой панели... и так далее.

* Второе решение предполагает дублирование общего кода со всеми негативными последствиями: 
  любое изменение предполагает поиск и редактирование всех затронутых копий
  структуры, корректность должна быть проверена для каждой копии, копии могут
  быть рассинхронизированы из-за неосторожных модификаций и тому подобное.

В такой ситуации пригодится тег ``embed``. Общий макет
может жить в одном базовом шаблоне, а две разные структуры содержания,
назовем их "микро-разметки", находятся в отдельных шаблонах, которые встраиваются
при необходимости:

Шаблон страницы ``foo.twig``:

.. code-block:: twig

    {% extends "layout_skeleton.twig" %}

    {% block content %}
        {% embed "vertical_boxes_skeleton.twig" %}
            {% block top %}
                Some content for the top box
            {% endblock %}

            {% block bottom %}
                Some content for the bottom box
            {% endblock %}
        {% endembed %}
    {% endblock %}

А вот код для ``vertical_boxes_skeleton.twig``:

.. code-block:: html+twig

    <div class="top_box">
        {% block top %}
            Top box default content
        {% endblock %}
    </div>

    <div class="bottom_box">
        {% block bottom %}
            Bottom box default content
        {% endblock %}
    </div>

Цель шаблона ``vertical_boxes_skeleton.twig`` заключается в том, чтобы учесть
HTML-разметки для блоков.

Тег ``embed`` принимает те же аргументы, что и тег ``include``:

.. code-block:: twig

    {% embed "base" with {'foo': 'bar'} %}
        ...
    {% endembed %}

    {% embed "base" with {'foo': 'bar'} only %}
        ...
    {% endembed %}

    {% embed "base" ignore missing %}
        ...
    {% endembed %}

.. warning::

    Поскольку встроенные шаблоны не имеют "имен", стратегии автоматического экранирования на основе
    имени шаблона не будут работать должным образом, если вы измените контекст (например, если
    вы встроите CSS/JavaScript-шаблон в HTML-шаблон). В таком случае явно установите стратегию
    автоматического экранирования по умолчанию с помощью тега ``autoescape``.

.. seealso::

    :doc:`include<../tags/include>`
