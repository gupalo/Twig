``for``
=======

Циклически просматривайте каждый элемент в последовательности или отображении. Например, чтобы
отобразить список пользователей, предоставленный в переменной с названием ``users``:

.. code-block:: html+twig

    <h1>Members</h1>
    <ul>
        {% for user in users %}
            <li>{{ user.username|e }}</li>
        {% endfor %}
    </ul>

.. note::

    Последовательность или отображение может быть как массивом, так и объектом,
    который реализует интерфейс ``Traversable``.

Если вам нужно выполнить итерацию над последовательностью чисел, вы можете использовать оператор ``..``:

.. code-block:: twig

    {% for i in 0..10 %}
        * {{ i }}
    {% endfor %}

Приведенный выше фрагмент кода выведет все цифры от 0 до 10.

Это также может быть полезно для букв:

.. code-block:: twig

    {% for letter in 'a'..'z' %}
        * {{ letter }}
    {% endfor %}

Оператор ``..`` может принимать любое выражение с обеих сторон:

.. code-block:: twig

    {% for letter in 'a'|upper..'z'|upper %}
        * {{ letter }}
    {% endfor %}

.. tip::

    Если вам нужен шаг, отличный от 1, вы можете использовать функцию
    ``range`` вместо этого.

Переменная ``loop``
-------------------

Внутри блока цикла ``for`` вы можете получить доступ к некоторым специальным переменным:

===================== =============================================================
Переменная            Описание
===================== =============================================================
``loop.index``        Текущая итерация цикла (индексируется 1)
``loop.index0``       Текущая итерация цикла (индексируется 0)
``loop.revindex``     Количество итераций от конца цикла (индексируется 1)
``loop.revindex0``    Количество итераций от конца цикла (индексируется 0)
``loop.first``        True, если не первая итерация
``loop.last``         True, если не последняя итерация
``loop.length``       Количество элементов в последовательности
``loop.parent``       Родительский контекст
===================== =============================================================

.. code-block:: twig

    {% for user in users %}
        {{ loop.index }} - {{ user.username }}
    {% endfor %}

.. note::

    Переменные ``loop.length``, ``loop.revindex``, ``loop.revindex0`` и 
    ``loop.last`` доступны только для массивов PHP или объектов, которые
    реализуют интерфейс ``Countable``.

Оговорка ``else``
-----------------

Если итерации не произошло, потому что последовательность была пустой, вы можете отобразить
блок замены, используя ``else``:

.. code-block:: html+twig

    <ul>
        {% for user in users %}
            <li>{{ user.username|e }}</li>
        {% else %}
            <li><em>no user found</em></li>
        {% endfor %}
    </ul>

Итерация по ключам
------------------

По умолчанию цикл выполняет итерацию по значениям последовательности. Вы можете выполнять итерацию
по ключам, используя фильтр ``keys``:

.. code-block:: html+twig

    <h1>Members</h1>
    <ul>
        {% for key in users|keys %}
            <li>{{ key }}</li>
        {% endfor %}
    </ul>

Итерация по ключам и значениям
------------------------------

Вы также можете получить доступ как к ключам, так и к значениям:

.. code-block:: html+twig

    <h1>Members</h1>
    <ul>
        {% for key, user in users %}
            <li>{{ key }}: {{ user.username|e }}</li>
        {% endfor %}
    </ul>

Итерация по подмножеству
------------------------

Вы можете захотеть выполнить итерацию по подмножеству значений. Этого можно добиться с помощью
фильтра :doc:`slice <../filters/slice>`:

.. code-block:: html+twig

    <h1>Top Ten Members</h1>
    <ul>
        {% for user in users|slice(0, 10) %}
            <li>{{ user.username|e }}</li>
        {% endfor %}
    </ul>

Итерация по строке
------------------

Чтобы выполнять итерации по символам строки, используйте фильтр
:doc:`split <../filters/split>`:

.. code-block:: html+twig

    <h1>Characters</h1>
    <ul>
        {% for char in "諺 / ことわざ"|split('') -%}
            <li>{{ char }}</li>
        {%- endfor %}
    </ul>
