``set``
=======

Внутри блоков кода вы также можете присваивать значения переменным. Присвоения используют
тег ``set`` и могут иметь несколько целей.

Вот как можно присвоить значение ``bar`` переменной ``foo``:

.. code-block:: twig

    {% set foo = 'bar' %}

После вызова ``set`` переменная ``foo`` доступна в шаблоне, как и
любые другие:

.. code-block:: twig

    {# displays bar #}
    {{ foo }}

Присваиваемым значением может быть любое валидное :ref:`выражение Twig
<twig-expressions>`:

.. code-block:: twig

    {% set foo = [1, 2] %}
    {% set foo = {'foo': 'bar'} %}
    {% set foo = 'foo' ~ 'bar' %}

В одном блоке можно присваивать несколько переменных:

.. code-block:: twig

    {% set foo, bar = 'foo', 'bar' %}

    {# эквивалентно #}

    {% set foo = 'foo' %}
    {% set bar = 'bar' %}

Тег ``set`` также можно использовать для 'захвата' фрагментов текста:

.. code-block:: html+twig

    {% set foo %}
        <div id="pagination">
            ...
        </div>
    {% endset %}

.. caution::

    Если вы включите автоматическое экранирование вывода, Twig будет считать содержание
    безопасным только при захвате фрагментов текста.

.. note::

    Заметьте, что в Twig циклы имеют область видимости, поэтому переменная, объявленная
    внутри цикла ``for``, недоступна за пределами самого цикла:

    .. code-block:: twig

        {% for item in list %}
            {% set foo = item %}
        {% endfor %}

        {# foo НЕ є доступною #}

    Если вы хотите получить доступ к переменной, просто объявите ее перед циклом:

    .. code-block:: twig

        {% set foo = "" %}
        {% for item in list %}
            {% set foo = item %}
        {% endfor %}

        {# foo є доступною #}
