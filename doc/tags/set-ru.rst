``set``
=======

Всередині блоків коду ви також можете присвоювати значення змінним. Присвоєння використовують
тег ``set`` і можуть мати декілька цілей.

Ось як можна присвоїти значення ``bar`` змінній ``foo``:

.. code-block:: twig

    {% set foo = 'bar' %}

Після виклику ``set`` змінна ``foo`` доступна у шаблоні, як і
будь-які інші:

.. code-block:: twig

    {# displays bar #}
    {{ foo }}

Значенням, що присвоюється, може бути будь-який валідний :ref:`вираз Twig
<twig-expressions>`:

.. code-block:: twig

    {% set foo = [1, 2] %}
    {% set foo = {'foo': 'bar'} %}
    {% set foo = 'foo' ~ 'bar' %}

В одному блоці можна присвоювати декілька змінних:

.. code-block:: twig

    {% set foo, bar = 'foo', 'bar' %}

    {# еквівалентно #}

    {% set foo = 'foo' %}
    {% set bar = 'bar' %}

Тег ``set`` також можна використовувати для 'захоплення' фрагментів тексту:

.. code-block:: html+twig

    {% set foo %}
        <div id="pagination">
            ...
        </div>
    {% endset %}

.. caution::

    Якщо ви увімкнете автоматичне екранування виведення, Twig вважатиме зміст
    безпечним лише при захопленні фрагментів тексту.

.. note::

    Зауважте, що у Twig цикли мають область видимості, тому змінна, оголошена
    всередині циклу ``for`` недоступна за межами самого циклу:

    .. code-block:: twig

        {% for item in list %}
            {% set foo = item %}
        {% endfor %}

        {# foo НЕ є доступною #}

    Якщо ви хочете отримати доступ до змінної, просто оголосіть її перед циклом:

    .. code-block:: twig

        {% set foo = "" %}
        {% for item in list %}
            {% set foo = item %}
        {% endfor %}

        {# foo є доступною #}
