``escape``
==========

Фильтр ``escape`` экранирует строку с помощью стратегий, которые зависят от контекста.

По умолчанию используется стратегия экранирования HTML:

.. code-block:: html+twig

    <p>
        {{ user.username|escape }}
    </p>

Для удобства фильтр ``e`` определен как псевдоним:

.. code-block:: html+twig

    <p>
        {{ user.username|e }}
    </p>

Фильтр ``escape`` также можно использовать в других контекстах, кроме HTML, благодаря
необязательному аргументу, который определяет стратегию экранирования для использования:

.. code-block:: twig

    {{ user.username|e }}
    {# эквивалентно #}
    {{ user.username|e('html') }}

А вот как экранировать переменные, включенные в код JavaScript:

.. code-block:: twig

    {{ user.username|escape('js') }}
    {{ user.username|e('js') }}

Фильтр ``escape`` поддерживает следующие стратегии экранирования для HTML-документов:

* ``html``: экранирует строку для контекста **тела HTML**.

* ``js``: экранирует строку для контекста **JavaScript**.

* ``css``: экранирует строку для контекста **CSS**. Экранирование CSS может быть применено
  к любой строке, вставляемой в CSS, и экранирует все, кроме буквенно-цифровых
  символов.

* ``url``: экранирует строку для контекстов **URI или параметра**. Не следует
  использовать его для экранирования целого URI; вставляется только подкомпонент.

* ``html_attr``: экранирует строку для контекста **HTML-атрибута**.

Заметьте, что контекстное экранирование в HTML-документах является сложной задачей, и выбор
правильной стратегии экранирования зависит от многих факторов. Пожалуйста, прочитайте соответствующую
документацию, например, `шпаргалку по предотвращению OWASP <https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md>`_, чтобы узнать больше об этой теме.

.. note::

    Внутренне ``escape`` использует нативную PHP-фунцию `htmlspecialchars`_ для
    стратегии экранирования HTML.

.. caution::

    При использовании автоматического экранирования Twig старается не допускать двойного 
    экранирования переменной, если стратегия автоматического экранирования совпадает со стратегией,
    примененной фильтром экранирования; но это не работает при использовании переменной в качестве стратегии
    экранирования:

    .. code-block:: twig

        {% set strategy = 'html' %}

        {% autoescape 'html' %}
            {{ var|escape('html') }}   {# won't be double-escaped #}
            {{ var|escape(strategy) }} {# will be double-escaped #}
        {% endautoescape %}

    При использовании переменной в качестве стратегии экранирования следует отключить
    автоматическое экранирование:

    .. code-block:: twig

        {% set strategy = 'html' %}

        {% autoescape 'html' %}
            {{ var|escape(strategy)|raw }} {# won't be double-escaped #}
        {% endautoescape %}

Пользовательские экранировщики
------------------------------

.. versionadded:: 3.10

    Класс ``EscaperRuntime`` был добавлен в версии 3.10. В предыдущих версиях
    вы могли определять собственные экранировщики с помощью вызова метода ``setEscaper()`` в
    экземпляре расширения экранировщика. Первым аргументом является стратегия экранирования
    (которая будет использована в вызове ``escape``), а вторым должно быть корректное PHP-вызываемое::

        use Twig\Extension\EscaperExtension;

        $twig = new \Twig\Environment($loader);
        $twig->getExtension(EscaperExtension::class)->setEscaper('csv', 'csv_escaper');

    При вызове из Twig, вызываемое получает экземпляр окружения Twig,
    строку для экранирования и набор символов.

Вы можете определить пользовательские экранировщики с помощью вызова метода ``setEscaper()`` 
в экземпляре выполнения экранировщика. Он принимает два аргумента: название стратегии и PHP,
который принимает строку для экранирования и набор символов::

    use Twig\Runtime\EscaperRuntime;

    $twig = new \Twig\Environment($loader);
    $escaper = fn ($string, $charset) => $string;
    $twig->getRuntime(EscaperRuntime::class)->setEscaper('identity', $escaper);

    # Использование в шаблоне:
    # {{ 'foo'|escape('identity') }}

.. note::

    Встроенные экранировщики нельзя переопределять, главным образом потому, что их следует 
    рассматривать как окончательную реализацию, а также для лучшей производительности.

Аргументы
---------

* ``strategy``: Стратегия экранирования
* ``charset``:  Набор символов строки

.. _`htmlspecialchars`: https://www.php.net/htmlspecialchars
