``include``
===========

Функция ``include`` возвращает отображенное содержание шаблона:

.. code-block:: twig

    {{ include('template.html') }}
    {{ include(some_var) }}

Включенные шаблоны имеют доступ к переменным активного контекста.

Если вы используете загрузчик файловой системы, шаблоны ищут в определенных им путях.

По умолчанию шаблону передается контекст, но вы также можете передать
дополнительные переменные:

.. code-block:: twig

    {# template.html будеть иметь доступ к переменным из текущего контекста и тем, которые предоставлены дополнительно #}
    {{ include('template.html', {foo: 'bar'}) }}

Вы можете отключить доступ к контексту, установив ``with_context`` в значение
``false``:

.. code-block:: twig

    {# будет доступной только переменная foo #}
    {{ include('template.html', {foo: 'bar'}, with_context = false) }}

.. code-block:: twig

    {# ни одна переменная не будет доступной #}
    {{ include('template.html', with_context = false) }}

И если выражение приводит к ``\Twig\Template`` или к экземпляру
``\Twig\TemplateWrapper``, Twig использует его напрямую::

    // {{ include(template) }}

    $template = $twig->load('some_template.twig');

    $twig->display('template.twig', ['template' => $template]);

Если вы установите флажок ``ignore_missing``, Twig вернёт пустую строку, если
шаблон не существует:

.. code-block:: twig

    {{ include('sidebar.html', ignore_missing = true) }}

Вы также можете предоставить список шаблонов, которые проверяются на существование перед
включением. Будет отображен первый найденный шаблон:

.. code-block:: twig

    {{ include(['page_detailed.html', 'page.html']) }}

Если установлено ``ignore_missing``, резервно будет возвращено к отображению ничего, если не существует ни одного
из шаблонов, иначе будет вызвано исключение.

При включении шаблона, созданного конечным пользователем, вам следует подумать о том, чтобы
изолировать его:

.. code-block:: twig

    {{ include('page.html', sandboxed = true) }}

Аргументы
---------

* ``template``:       Шаблон для отображения
* ``variables``:      Переменные для передачи шаблону
* ``with_context``:   Передавать ли текущие переменные контекста
* ``ignore_missing``: Игнорировать ли отсутствующие шаблоны
* ``sandboxed``:      Использовать ли песочницу для шаблона
